package {{packageName}};

import com.github.sdorra.dto.DTO;
import com.github.sdorra.dto.DTOContext;

/**
 * Automatic generated dto class for {@link {{className}}}.
 *
 * @see http://de.slideshare.net/stormpath/rest-jsonapis
 */
public class {{simpleDTOName}} extends DTO
{
  /** sub path of resource */
  public static final String RESOURCE_PATH = "{{resourcePath}}";

  //~--- DTO fields ------------------------------------------------------------

  {{#fields}}
  
  /** dto for field {{variable}} */
  public static final String {{constant}} = "{{variable}}";
  {{/fields}}
  
  //~--- constructors ----------------------------------------------------------
  
  /**
   * No args constructor for unmarshalling.
   **/
  {{simpleDTOName}}(){}
  
  /** 
   * Constructor to copy dto fields from {@link {{className}}}.
   * 
   * @param dtoContext dto context
   * @param {{instanceName}}
   **/
  public {{simpleDTOName}}(DTOContext dtoContext, {{className}} {{instanceName}})
  {
     this.putMetaObject(dtoContext, RESOURCE_PATH, {{instanceName}}.{{idField.getter}}());
     {{#fields}}{{#getter}}
     {{#dto}}
     // convert nested dto
     this.putNonNull(dtoContext, {{constant}}, {{dto}}.fromEntity(dtoContext.nested({{constant}}), {{instanceName}}.{{getter}}()));
     {{/dto}}
     {{^dto}}
     this.putNonNull(dtoContext, {{constant}}, {{instanceName}}.{{getter}}());
     {{/dto}}
     {{/getter}}{{/fields}}
  }
  
  /**
   * Creates a new dto from the entity.
   *
   * @param dtoContext dto context
   * @param {{instanceName}}
   *
   * @return new dto
   **/
  public static {{simpleDTOName}} fromEntity(DTOContext dtoContext, {{className}} {{instanceName}})
  {
    {{simpleDTOName}} dto = null;
    if ({{instanceName}} != null)
    {
      dto = new {{simpleDTOName}}(dtoContext, {{instanceName}}); 
    }
    return dto;
  }
  
  /**
   * Converts the dto back to a {{className}}.
   *
   * @return entity
   **/
  public {{className}} toEntity()
  {
    {{className}} {{instanceName}} = new {{className}}();
    mergeWithEntity({{instanceName}});
    return {{instanceName}};
  }
  
  /**
   * Creates entity from dto.
   *
   * @param {{instanceName}}
   **/
  public void mergeWithEntity({{className}} {{instanceName}})
  {
    {{#fields}}{{^dto}}{{#setter}}
    {{instanceName}}.{{setter}}(({{type}}) this.get({{constant}}));
    {{/setter}}{{/dto}}{{/fields}}
  }
}